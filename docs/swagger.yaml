definitions:
  controller.CreateTransactionRequest:
    properties:
      cinemaId:
        type: integer
      details:
        items:
          $ref: '#/definitions/models.TransactionDetailRequest'
        type: array
      location:
        type: string
      movieId:
        type: integer
      paymentMethodId:
        type: integer
      priceTotal:
        type: integer
      userId:
        type: integer
    type: object
  dto.ChangePassword:
    properties:
      email:
        type: string
      newpassword:
        type: string
      oldPassword:
        type: string
      otp:
        type: integer
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.HistoryReq:
    properties:
      id:
        type: integer
      id_trx:
        type: integer
      note:
        type: string
      status:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.RegisterResquest:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.TransactionDetailData:
    properties:
      cinemaName:
        type: string
      customerName:
        type: string
      customerPhone:
        type: string
      date:
        type: string
      id:
        type: integer
      location:
        type: string
      movieTitle:
        type: string
      paymentMethodName:
        type: string
      seat:
        type: string
      time:
        type: string
      transactionId:
        type: integer
    type: object
  dto.TransactionResponses:
    properties:
      cinemaName:
        type: string
      date:
        type: string
      id:
        type: integer
      location:
        type: string
      movieTitle:
        type: string
      paymentMethodName:
        type: string
      priceTotal:
        type: integer
      time:
        type: string
      userId:
        type: integer
    type: object
  models.Actor:
    properties:
      fullname:
        type: string
      id:
        type: integer
    type: object
  models.Cinema:
    properties:
      id:
        type: integer
      logo:
        type: string
      name:
        type: string
    type: object
  models.Directors:
    properties:
      fullname:
        type: string
      id:
        type: integer
    type: object
  models.Genres:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Movies:
    properties:
      background:
        type: string
      casts:
        items:
          type: string
        type: array
      directors:
        items:
          type: string
        type: array
      duration:
        type: integer
      genres:
        items:
          type: string
        type: array
      id:
        type: integer
      poster:
        type: string
      price:
        type: integer
      releaseDate:
        type: string
      synopsis:
        type: string
      title:
        type: string
    type: object
  models.MoviesReq:
    properties:
      background:
        type: string
      casts:
        items:
          type: integer
        type: array
      directors:
        items:
          type: integer
        type: array
      duration:
        type: integer
      genres:
        items:
          type: integer
        type: array
      id:
        type: integer
      poster:
        type: string
      price:
        type: integer
      releaseDate:
        type: string
      synopsis:
        type: string
      title:
        type: string
    type: object
  models.Payment:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.TransactionDetailRequest:
    properties:
      customerName:
        type: string
      customerPhone:
        type: string
      seat:
        type: string
    type: object
  models.Users:
    properties:
      email:
        type: string
      image:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        type: string
      userId:
        type: integer
      username:
        type: string
    type: object
  utils.Response:
    properties:
      error:
        type: string
      message:
        type: string
      results: {}
      success:
        type: boolean
      token:
        type: string
    type: object
info:
  contact: {}
  description: This is a backend service for tickitz web app
  title: Movxtar API Documentation
  version: "1.0"
paths:
  /auth:
    get:
      description: Retrieve all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Users'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Get User
      tags:
      - Auth
  /auth/forgot:
    post:
      consumes:
      - application/json
      description: Send OTP to user's email for password reset
      parameters:
      - description: Forgot Password Data
        in: body
        name: ForgotPassword
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Forgot password request
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login Data
        in: body
        name: Login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                ' token':
                  type: string
                results:
                  $ref: '#/definitions/models.Users'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: User Login
      tags:
      - Auth
  /auth/register:
    post:
      description: Retrieve Post users
      parameters:
      - description: User Data
        in: body
        name: Register
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterResquest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Users'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Post User
      tags:
      - Auth
  /auth/reset:
    post:
      consumes:
      - application/json
      description: Change password using OTP and old password verification
      parameters:
      - description: Change Password Data
        in: body
        name: ChangePassword
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePassword'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Change user password
      tags:
      - Auth
  /cinema:
    get:
      description: Retrieve all Cinema
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Cinema'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get  Cinema
      tags:
      - Cinema
    post:
      consumes:
      - application/json
      description: Add a new cinema to the database
      parameters:
      - description: Cinema Data
        in: body
        name: cinema
        required: true
        schema:
          $ref: '#/definitions/models.Cinema'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Create a new cinema
      tags:
      - Cinema
  /cinema/{id}:
    delete:
      description: Delete a cinema from database by ID
      parameters:
      - description: Cinema ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Delete a cinema
      tags:
      - Cinema
    get:
      description: Retrieve a specific cinema using its ID
      parameters:
      - description: Cinema ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  $ref: '#/definitions/models.Cinema'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get cinema by ID
      tags:
      - Cinema
    put:
      consumes:
      - application/json
      description: Update cinema details by ID
      parameters:
      - description: Cinema ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Cinema Data
        in: body
        name: cinema
        required: true
        schema:
          $ref: '#/definitions/models.Cinema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Update an existing cinema
      tags:
      - Cinema
  /history:
    get:
      description: Get list of all transaction histories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Get all history transactions
      tags:
      - History
  /history/{id}:
    patch:
      consumes:
      - application/json
      description: Update status and note of a history transaction by ID
      parameters:
      - description: History ID
        in: path
        name: id
        required: true
        type: integer
      - description: History Update Request
        in: body
        name: history
        required: true
        schema:
          $ref: '#/definitions/dto.HistoryReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Update a history transaction status
      tags:
      - History
  /history/user:
    get:
      description: Retrieve transaction history by authenticated user ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/dto.HistoryReq'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Get History by User ID
      tags:
      - History
  /movie:
    get:
      description: Retrieve all movies with search and pagination
      parameters:
      - description: Search by title
        in: query
        name: search
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 5
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Movies'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Get Upcoming movies
      tags:
      - Movies
    post:
      consumes:
      - application/json
      description: Admin create movies
      parameters:
      - description: Movie Data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.MoviesReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Create
      tags:
      - Admin
  /movie/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Update movies
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie Data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Movies'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated movie
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Delete
      tags:
      - Admin
    patch:
      consumes:
      - application/json
      description: Admin Update movies
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie Data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Movies'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated movie
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Update
      tags:
      - Admin
  /movie/actor:
    get:
      description: Retrieve all actors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Actor'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Actorss
      tags:
      - Actors
    post:
      consumes:
      - application/json
      description: Admin create Actors
      parameters:
      - description: Actor Data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Actor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Create Actors
      tags:
      - Actors
  /movie/actor/{id}:
    delete:
      consumes:
      - application/json
      description: Admin Delete Actors
      parameters:
      - description: Actor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Delete Actor
      tags:
      - Actors
    patch:
      consumes:
      - application/json
      description: Admin update Actors
      parameters:
      - description: Actor Data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Actor'
      - description: Actor ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Update Actor
      tags:
      - Actors
  /movie/director:
    get:
      description: Retrieve all director
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Directors'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Director
      tags:
      - Directors
    post:
      consumes:
      - application/json
      description: Admin create Directors
      parameters:
      - description: Director Data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Directors'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Create Directors
      tags:
      - Directors
  /movie/director/{id}:
    delete:
      consumes:
      - application/json
      description: Admin Delete Directors
      parameters:
      - description: Director ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Delete Directors
      tags:
      - Directors
    patch:
      consumes:
      - application/json
      description: Admin Update Directors
      parameters:
      - description: Director Data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Directors'
      - description: Director ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Update Directors
      tags:
      - Directors
  /movie/filter:
    get:
      description: Retrieve movies filtered by genre
      parameters:
      - description: Genre Name
        in: query
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Movies'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Movies By Genre
      tags:
      - Movies
  /movie/genre:
    get:
      description: Retrieve all Genre
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Genres'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Genre
      tags:
      - Genres
    post:
      consumes:
      - application/json
      description: Admin create Genre
      parameters:
      - description: Genre Data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Genres'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Create Genre
      tags:
      - Genres
  /movie/genre/{id}:
    delete:
      consumes:
      - application/json
      description: Admin Delete Genre
      parameters:
      - description: Genre Data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Genres'
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Delete Genre
      tags:
      - Genres
    patch:
      consumes:
      - application/json
      description: Admin Update Genre
      parameters:
      - description: Genre Data
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.Genres'
      - description: Genre ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Update Genre
      tags:
      - Genres
  /movie/now-showing:
    get:
      description: Retrieve all movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Movies'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get NowShowing movies
      tags:
      - Movies
  /movie/upcoming:
    get:
      description: Retrieve all movies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Movies'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Upcoming movies
      tags:
      - Movies
  /payment:
    get:
      description: Retrieve all Payment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/models.Payment'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get  Payment
      tags:
      - Payment
    post:
      consumes:
      - application/json
      description: Add a new payment method to the database
      parameters:
      - description: Payment Data
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/models.Payment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Create a new payment method
      tags:
      - Payment
  /payment/{id}:
    delete:
      description: Delete a payment method from database by ID
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Delete a payment method
      tags:
      - Payment
    get:
      description: Retrieve a specific payment method using its ID
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  $ref: '#/definitions/models.Payment'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get payment method by ID
      tags:
      - Payment
    put:
      consumes:
      - application/json
      description: Update payment method details by ID
      parameters:
      - description: Payment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Payment Data
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/models.Payment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Update an existing payment method
      tags:
      - Payment
  /trx:
    get:
      description: Retrieve all transactions from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/dto.TransactionResponses'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Get all transactions
      tags:
      - Transaction
    post:
      consumes:
      - application/json
      description: Create a transaction along with its details
      parameters:
      - description: Transaction Data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/controller.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Create a new transaction
      tags:
      - Transaction
  /trx/{id}:
    get:
      description: Retrieve a specific transaction using its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  $ref: '#/definitions/dto.TransactionResponses'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Get transaction by ID
      tags:
      - Transaction
  /trx/detail/{id}:
    get:
      description: Retrieve detailed information of a transaction by transaction ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/dto.TransactionDetailData'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Get transaction details
      tags:
      - Transaction
  /trx/user/{id}:
    get:
      description: Retrieve all transactions for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Response'
            - properties:
                results:
                  items:
                    $ref: '#/definitions/dto.TransactionResponses'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - Token: []
      summary: Get all transactions by user ID
      tags:
      - Transaction
securityDefinitions:
  Token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
